<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.2 r1790748">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="upsert" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath">/Users/rslee/bin/apache-jmeter-3.2/lib/postgresql-42.1.1.jar</stringProp>
    </TestPlan>
    <hashTree>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="cockroach" enabled="true">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery">Select 1</stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="dataSource">cr</stringProp>
        <stringProp name="dbUrl">jdbc:postgresql://127.0.0.1:26257/md?autoReconnect=true&amp;sslmode=disable&amp;ssl=false</stringProp>
        <stringProp name="driver">org.postgresql.Driver</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password"></stringProp>
        <stringProp name="poolMax">10</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">TRANSACTION_SERIALIZABLE</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">root</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="cockroach-ssl" enabled="false">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery">Select 1</stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="dataSource">cr</stringProp>
        <stringProp name="dbUrl">jdbc:postgresql://127.0.0.1:26257/md?autoReconnect=true&amp;sslcert=/Users/rslee/certs/client.root.crt&amp;sslkey=/Users/rslee/certs/client.root.key&amp;sslrootcert=/Users/rslee/certs/ca.crt&amp;sslmode=require&amp;ssl=true</stringProp>
        <stringProp name="driver">org.postgresql.Driver</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password"></stringProp>
        <stringProp name="poolMax">10</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">TRANSACTION_SERIALIZABLE</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">root</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="postgres" enabled="false">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery">Select 1</stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="dataSource">cr</stringProp>
        <stringProp name="dbUrl">jdbc:postgresql://127.0.0.1/md?autoReconnect=true</stringProp>
        <stringProp name="driver">org.postgresql.Driver</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password"></stringProp>
        <stringProp name="poolMax">10</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">TRANSACTION_SERIALIZABLE</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">rslee</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setup thread" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1494341301000</longProp>
        <longProp name="ThreadGroup.end_time">1494341301000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </SetupThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create_accounts" enabled="true">
          <stringProp name="dataSource">cr</stringProp>
          <stringProp name="queryType">Update Statement</stringProp>
          <stringProp name="query">CREATE TABLE IF NOT EXISTS account (
id INT PRIMARY KEY not null
,balance decimal(15,2) not null
)
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create_journal" enabled="true">
          <stringProp name="dataSource">cr</stringProp>
          <stringProp name="queryType">Update Statement</stringProp>
          <stringProp name="query">create table if not exists journal (
txnid int not null
,source int not null
,target int not null
,amount decimal(15,2) not null
,time timestamp default now() not null
,primary key (txnid,source,target)
)</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="create_txn" enabled="true">
          <stringProp name="dataSource">cr</stringProp>
          <stringProp name="queryType">Update Statement</stringProp>
          <stringProp name="query">create table if not exists txn (
txnid serial primary key not null
,source int not null
,target int not null
,amount decimal (15,2) not null
)</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="replace_accounts" enabled="true">
          <stringProp name="dataSource">cr</stringProp>
          <stringProp name="queryType">Update Statement</stringProp>
          <stringProp name="query">upsert INTO account (id, balance) VALUES (1, 40), (2, 60),(3, 40), (4, 60.01)
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="balance thread" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">stoptest</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1494341935000</longProp>
        <longProp name="ThreadGroup.end_time">1494341935000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="balance" enabled="true">
          <stringProp name="dataSource">cr</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT balance FROM accounts where id in (1,2,3,4)</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">balance</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="balance asserting" enabled="true">
          <collectionProp name="Asserion.test_strings">
            <stringProp name="49586">200</stringProp>
          </collectionProp>
          <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
          <boolProp name="Assertion.assume_success">false</boolProp>
          <intProp name="Assertion.test_type">8</intProp>
          <stringProp name="Assertion.scope">variable</stringProp>
          <stringProp name="Scope.variable">balance_1</stringProp>
        </ResponseAssertion>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="txn thread" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1494343548000</longProp>
        <longProp name="ThreadGroup.end_time">1494343548000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="transfer1_2" enabled="false">
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">// read committed maps to snaoshot
// anything higher maps to serizable where some txns will need to be pushed

import java.sql.*;

import org.apache.jmeter.protocol.jdbc.config.DataSourceElement;

class InsufficientBalanceException extends Exception {}
class AccountNotFoundException extends Exception {
    public int account;
    public AccountNotFoundException(int account) {
        this.account = account;
    }
}

int from = 1;
int to = 2;
int amount = 1;
Connection conn = DataSourceElement.getConnection(&quot;cr&quot;);

try {

//  ResultSet res = conn.createStatement().executeQuery(&quot;SELECT balance FROM accounts WHERE id = &quot; + from);
//  if(!res.next()) {
//    throw new AccountNotFoundException(from);
//  }
  // Perform the transfer.
  conn.createStatement().executeUpdate(&quot;BEGIN ISOLATION LEVEL SERIALIZABLE, PRIORITY HIGH;&quot;);
  conn.createStatement().executeUpdate(&quot;UPDATE accounts SET balance = balance - &quot; + amount + &quot; where id = &quot; + from);
  conn.createStatement().executeUpdate(&quot;UPDATE accounts SET balance = balance + &quot; + amount + &quot; where id = &quot; + to);
  conn.createStatement().executeUpdate(&quot;COMMIT;&quot;);
  
} finally {
 conn.close();
}</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="transfer1_2_returning_nothing" enabled="true">
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">// read committed maps to snaoshot
// anything higher maps to serizable where some txns will need to be pushed

import java.sql.*;

import org.apache.jmeter.protocol.jdbc.config.DataSourceElement;

class InsufficientBalanceException extends Exception {}
class AccountNotFoundException extends Exception {
    public int account;
    public AccountNotFoundException(int account) {
        this.account = account;
    }
}

int from = 1;
int to = 2;
int amount = 1;
int txnid = 1;

String suffix = &quot; returning nothing&quot;;

// String suffix = &quot; &quot;;

Connection conn = DataSourceElement.getConnection(&quot;cr&quot;);

try {

  ResultSet res;
  res = conn.createStatement().executeQuery(
  	&quot;BEGIN;&quot; +
  	&quot;insert into txn (source,target,amount) values &quot; +
  		&quot;(&quot; + from + &quot;,&quot; + to + &quot;,&quot; + amount + &quot;) returning (txnid);&quot;
  );

  res.next(); // insert resultSet
  txnid= res.getInt(1);

  conn.createStatement().execute(  		
  	&quot;insert into account (id,balance) values &quot; +
  		&quot;(&quot; + from + &quot;,&quot; + (-amount)  + &quot;),&quot; + 
  		&quot;(&quot; + to   + &quot;,&quot; + (+amount) + &quot;) &quot; + 
  		&quot;on conflict (id) do update set balance = account.balance + excluded.balance&quot; + suffix + &quot;;&quot; +
  	&quot;insert into journal (txnid,source,target,amount) values &quot; +
  		&quot;(&quot; + txnid + &quot;,&quot; + from + &quot;,&quot; + to   + &quot;,&quot; + (+amount) + &quot;),&quot; + 
  		&quot;(&quot; + txnid + &quot;,&quot; + to   + &quot;,&quot; + from + &quot;,&quot; + (-amount) + &quot;)&quot; + suffix + &quot;;&quot; +
  	&quot;COMMIT;&quot;
  	);
  
} finally {
 conn.close();
}</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="transfer1_2_one_statement" enabled="false">
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">// read committed maps to snaoshot
// anything higher maps to serizable where some txns will need to be pushed

import java.sql.*;

import org.apache.jmeter.protocol.jdbc.config.DataSourceElement;

class InsufficientBalanceException extends Exception {}
class AccountNotFoundException extends Exception {
    public int account;
    public AccountNotFoundException(int account) {
        this.account = account;
    }
}

int from = 1;
int to = 2;
int amount = 1;
int from2 = 3;
int to2 = 4;

// String suffix = &quot; returning nothing;&quot;;

String suffix = &quot; ;&quot;;

Connection conn = DataSourceElement.getConnection(&quot;cr&quot;);

try {

//  ResultSet res = conn.createStatement().executeQuery(&quot;SELECT balance FROM accounts WHERE id = &quot; + from);
//  if(!res.next()) {
//    throw new AccountNotFoundException(from);
//  }
  // Perform the transfer.
  conn.createStatement().executeUpdate(&quot;BEGIN;&quot; +
  &quot;UPDATE account1 SET balance = balance - &quot; + amount + &quot; where id = &quot; + from + suffix +
  &quot;UPDATE account2 SET balance = balance + &quot; + amount + &quot; where id = &quot; + to + suffix +
  &quot;UPDATE account3 SET balance = balance - &quot; + amount + &quot; where id = &quot; + from2 + suffix +
  &quot;UPDATE account4 SET balance = balance + &quot; + amount + &quot; where id = &quot; + to2 + suffix +
  &quot;COMMIT;&quot;);
  
} finally {
 conn.close();
}</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="transfer1_2_one_statement" enabled="false">
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">// read committed maps to snaoshot
// anything higher maps to serizable where some txns will need to be pushed

import java.sql.*;

import org.apache.jmeter.protocol.jdbc.config.DataSourceElement;

class InsufficientBalanceException extends Exception {}
class AccountNotFoundException extends Exception {
    public int account;
    public AccountNotFoundException(int account) {
        this.account = account;
    }
}

int from = 1;
int to = 2;
int amount = 1;
int from2 = 3;
int to2 = 4;

// String suffix = &quot; returning nothing;&quot;;

String suffix = &quot; ;&quot;;

Connection conn = DataSourceElement.getConnection(&quot;cr&quot;);

try {

  conn.createStatement().executeUpdate(&quot;BEGIN;&quot; +
  &quot;UPDATE account1 SET balance =  &quot; + amount + &quot; where id = &quot; + from + suffix +
  &quot;UPDATE account2 SET balance =  &quot; + amount + &quot; where id = &quot; + to + suffix +
  &quot;UPDATE account3 SET balance =  &quot; + amount + &quot; where id = &quot; + from2 + suffix +
  &quot;UPDATE account4 SET balance =  &quot; + amount + &quot; where id = &quot; + to2 + suffix +
  &quot;COMMIT;&quot;);
  
} finally {
 conn.close();
}</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="txn thread" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1494343548000</longProp>
        <longProp name="ThreadGroup.end_time">1494343548000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="transfer2_3" enabled="true">
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">// read committed maps to snaoshot
// anything higher maps to serizable where some txns will need to be pushed

import java.sql.*;

import org.apache.jmeter.protocol.jdbc.config.DataSourceElement;

class InsufficientBalanceException extends Exception {}
class AccountNotFoundException extends Exception {
    public int account;
    public AccountNotFoundException(int account) {
        this.account = account;
    }
}

int from = 2;
int to = 3;
int amount = 1;
Connection conn = DataSourceElement.getConnection(&quot;cr&quot;);

try {
  conn.setAutoCommit(false);

//  ResultSet res = conn.createStatement().executeQuery(&quot;SELECT balance FROM accounts WHERE id = &quot; + from);
//  if(!res.next()) {
//    throw new AccountNotFoundException(from);
//  }
  // Perform the transfer.
  conn.createStatement().executeUpdate(&quot;UPDATE accounts SET balance = balance - &quot; + amount + &quot; where id = &quot; + from);
  conn.createStatement().executeUpdate(&quot;UPDATE accounts SET balance = balance + &quot; + amount + &quot; where id = &quot; + to);
  conn.commit()
  
} finally {
 conn.close();
}</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="txn thread" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1494343548000</longProp>
        <longProp name="ThreadGroup.end_time">1494343548000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="transfer3_1" enabled="true">
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">// read committed maps to snaoshot
// anything higher maps to serizable where some txns will need to be pushed

import java.sql.*;

import org.apache.jmeter.protocol.jdbc.config.DataSourceElement;

class InsufficientBalanceException extends Exception {}
class AccountNotFoundException extends Exception {
    public int account;
    public AccountNotFoundException(int account) {
        this.account = account;
    }
}

int from = 3;
int to = 1;
int amount = 1;
Connection conn = DataSourceElement.getConnection(&quot;cr&quot;);

try {
  conn.setAutoCommit(false);

//  ResultSet res = conn.createStatement().executeQuery(&quot;SELECT balance FROM accounts WHERE id = &quot; + from);
//  if(!res.next()) {
//    throw new AccountNotFoundException(from);
//  }
  // Perform the transfer.
  conn.createStatement().executeUpdate(&quot;UPDATE accounts SET balance = balance - &quot; + amount + &quot; where id = &quot; + from);
  conn.createStatement().executeUpdate(&quot;UPDATE accounts SET balance = balance + &quot; + amount + &quot; where id = &quot; + to);
  conn.commit()
  
} finally {
 conn.close();
}</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="txn thread" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1494343548000</longProp>
        <longProp name="ThreadGroup.end_time">1494343548000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="transfer1_23" enabled="false">
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">// read committed maps to snaoshot
// anything higher maps to serizable where some txns will need to be pushed

import java.sql.*;

import org.apache.jmeter.protocol.jdbc.config.DataSourceElement;

class InsufficientBalanceException extends Exception {}
class AccountNotFoundException extends Exception {
    public int account;
    public AccountNotFoundException(int account) {
        this.account = account;
    }
}

int accountsMax = 4;
int from = 1;
int amountFrom = 2;
int amountTo = 1;
Connection conn = DataSourceElement.getConnection(&quot;cr&quot;);

try {
  conn.setAutoCommit(false);
  conn.createStatement().executeUpdate(&quot;UPDATE accounts SET balance = balance - &quot; + amountFrom + &quot; where id = &quot; + from);
  conn.createStatement().executeUpdate(&quot;UPDATE accounts SET balance = balance + &quot; + amountTo + &quot; where id = &quot; + (from + 1)%accountsMax);
  conn.createStatement().executeUpdate(&quot;UPDATE accounts SET balance = balance + &quot; + amountTo + &quot; where id = &quot; + (from + 2)%accountsMax);
  conn.commit()
  
} finally {
 conn.close();
}</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
